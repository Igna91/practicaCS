Feature: comprar
    As user
    I want to buy players
    To improve my team

  Scenario: The player is not for sale                                       # comprar.feature:6
    Given a <futboll player> and a <team id>                                 # comprar.a_futboll_player_and_a_team_id()
    When I press the "Comprar jugador" button AND the player is not for sale # comprar.i_press_the_something_button_and_the_player_is_not_for_sale(String)
    Then I should be able to not buy                                         # comprar.i_should_be_able_to_not_buy()

  Scenario: The player does not exist                                  # comprar.feature:11
    Given a <futboll player> and a <team id>                           # comprar.a_futboll_player_and_a_team_id()
    When I press the "Comprar jugador" button AND the player not exist # comprar.i_press_the_something_button_and_the_player_not_exist(String)
    Then I should be able to not buy                                   # comprar.i_should_be_able_to_not_buy()

  Scenario: Not having enough money                                         # comprar.feature:16
    Given a <futboll player> and a <team id>                                # comprar.a_futboll_player_and_a_team_id()
    When I press the "Comprar jugador" button AND I don't have enough money # comprar.i_press_the_something_button_and_i_dont_have_enough_money(String)
    Then I should be able to not buy                                        # comprar.i_should_be_able_to_not_buy()

  Scenario: Having enough money to buy a football player and the team there # comprar.feature:21
    Given a <futboll player> and a <team id>                                # comprar.a_futboll_player_and_a_team_id()
    When I press the "Comprar jugador" button AND I have enough money       # comprar.i_press_the_something_button_and_i_have_enough_money(String)
    Then I should be able to buy my money should be increased               # comprar.i_should_be_able_to_buy_my_money_should_be_increased()

  Scenario: Having enough money to buy a football player but the team not exist          # comprar.feature:26
    Given a <futboll player> and a <team id>                                             # comprar.a_futboll_player_and_a_team_id()
    When I press the "Comprar jugador" button AND I have enough money but team not exist # comprar.i_press_the_button_AND_I_have_enough_money_but_team_not_exist(String)
    Then I should be able to not buy                                                     # comprar.i_should_be_able_to_not_buy()
Feature: login
    As user
    I want to log in in the application
    To anybody canÂ´t play with my team

  Scenario: main screen user                         # login.feature:6
    Given a user "user" and password "password"      # login.a_user_and_password(String,String)
    When <password> is empty and <user> is not empty # login.password_is_empty_and_user_is_not_empty()
    Then should let me not access                    # login.should_let_me_not_access()

  Scenario: main screen password                          # login.feature:11
    Given a user "user" and password "password"           # login.a_user_and_password(String,String)
    When <password> is not empty and user <user> is empty # login.password_is_not_empty_and_user_user_is_empty()
    Then should let me not access                         # login.should_let_me_not_access()

  Scenario: user incorrect and password correct            # login.feature:16
    Given a user "user" and password "password"            # login.a_user_and_password(String,String)
    When the <password> is valid and the <user> is invalid # login.the_password_is_valid_and_the_user_is_invalid()
    Then should let me not access                          # login.should_let_me_not_access()

  Scenario: user and password are correct                # login.feature:21
    Given a user "user" and password "password"          # login.a_user_and_password(String,String)
    When the <password> is valid and the <user> is valid # login.the_password_is_valid_and_the_user_is_valid()
    Then should let me access                            # login.should_let_me_access()

  Scenario: user correct and password incorrect            # login.feature:26
    Given a user "user" and password "password"            # login.a_user_and_password(String,String)
    When the <password> is invalid and the <user> is valid # login.the_password_is_invalid_and_the_user_is_valid()
    Then should let me not access                          # login.should_let_me_not_access()
Feature: Team summary
    As player
    I want to see my team players and score
    To keep me updated

  Scenario: not empty principal team  # team_summary.feature:6
    Given my team                     # team_summary.my_team()
    When My main team has players     # team_summary.my_main_team_has_players()
    Then my main football team return # team_summary.my_main_football_team_return()

  Scenario: empty team principal team        # team_summary.feature:11
    Given my team                            # team_summary.my_team()
    When My main team does not have players  # team_summary.my_main_team_does_not_have_players()
    Then an empty principal team is returned # team_summary.an_empty_principal_team_is_returned()

  Scenario: not empty reserve team       # team_summary.feature:16
    Given my team                        # team_summary.my_team()
    When My secondary team has players   # team_summary.my_secondary_team_has_players()
    Then my backup equipment will return # team_summary.my_backup_equipment_will_return()

  Scenario: empty team reserve team              # team_summary.feature:21
    Given my team                                # team_summary.my_team()
    When My secondary team does not have players # team_summary.my_secondary_team_does_not_have_players()
    Then an empty reserve team is returned       # team_summary.an_empty_reserve_team_is_returned()

  Scenario: team score                  # team_summary.feature:26
    Given my team                       # team_summary.my_team()
    When I press the "Datos" button     # team_summary.i_press_the_something_button(String)
    Then my team money will be returned # team_summary.my_team_money_will_be_returned()
Feature: vender
    As user
    I want to sell players
    To earn money

  Scenario: Sell a player and that player does not belong to the team # vender.feature:6
    Given a team and Player                                           # vender.a_team_and_player()
    When I want to sell a player but does not belong to the team      # vender.i_want_to_sell_a_player_but_does_not_belong_to_the_team()
    Then I can not put it on sale                                     # vender.i_can_not_put_it_on_sale()

  Scenario: Sell a player and that player not exist              # vender.feature:11
    Given a team and Player                                      # vender.a_team_and_player()
    When I want to sell a player, but that player does not exist # vender.i_want_to_sell_a_player_but_that_player_does_not_exist()
    Then I can not put it on sale                                # vender.i_can_not_put_it_on_sale()

  Scenario: Sell a player and that player does belong to the team   # vender.feature:16
    Given a team and Player                                         # vender.a_team_and_player()
    When I want to sell a player and exists and belongs to the team # vender.i_want_to_sell_a_player_and_exists_and_belongs_to_the_team()
    Then I can put it on sale                                       # vender.i_can_put_it_on_sale()

  Scenario: Sell a player and the player is already on sale # vender.feature:21
    Given a team and Player                                 # vender.a_team_and_player()
    When I want to sell a player and is already sold        # vender.i_want_to_sell_a_player_and_is_already_sold()
    Then I can not put it on sale                           # vender.i_can_not_put_it_on_sale()

  Scenario: Sell a player and the team to which it belongs does not exist        # vender.feature:26
    Given a team and Player                                                      # vender.a_team_and_player()
    When I want to sell a player and the team to which it belongs does not exist # vender.i_want_to_sell_a_player_and_the_team_to_which_it_belongs_does_not_exist()
    Then I can not put it on sale                                                # vender.i_can_not_put_it_on_sale()
